{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qnddj\\\\Desktop\\\\React Project\\\\\\uC804\\uC790\\uBA85\\uD568Project\\\\makecard\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport css from \"./App.css\";\nimport NavigationUser from \"./Components/NavigationUser\";\nimport Navigation from \"./Components/Navigation\";\nimport Home from \"./routes/Home\";\nimport Myspace from \"./routes/Myspace\";\nimport Signin from \"./routes/Signin\";\nimport Repository from \"./routes/Repository\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [user, setUser] = useState(null); // login({username})의 함수를 통해 Signin.js에서 username을 가져와 setUser을 통해 상태관리\n\n  const authenticated = user != null; // 사용자 로그인 인증\n\n  const [usertoken, setuserToken] = useState(null); //위와 같은 login으로 token값을 가져옴\n\n  const gettoken = ({\n    token\n  }) => setuserToken({\n    token\n  });\n\n  const login = ({\n    username\n  }) => setUser({\n    username\n  });\n\n  const logout = () => setUser(null);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(HashRouter, {\n      children: [authenticated ?\n      /*#__PURE__*/\n      //사용자가 로그인 O\n      _jsxDEV(NavigationUser, {\n        user: user,\n        logout: logout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this) //사용자의 카카오 닉네임을 받아온 user(state)와 logout함수를 인자로 보내준다.\n      :\n      /*#__PURE__*/\n      // 사용자가 로그인 X\n      _jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        component: Home\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/myspace\",\n        usertoken: usertoken,\n        component: Myspace\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/myspace/repository\",\n        component: Repository\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/signin\",\n        render: props => /*#__PURE__*/_jsxDEV(Signin, {\n          authenticated: authenticated,\n          login: login,\n          gettoken: gettoken,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this) // Signin(로그인)을 렌더링할때 authenticated(사용자 로그인 여부)와 login(카카오 로그인 api에서 사용자 닉네임을 받아오기 위한 함수)를 인자로 보내준다.\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"XOzp8L3ggatgtLwzLiwAFHf83Uk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/qnddj/Desktop/React Project/전자명함Project/makecard/src/App.js"],"names":["React","useState","useEffect","HashRouter","Route","css","NavigationUser","Navigation","Home","Myspace","Signin","Repository","App","user","setUser","authenticated","usertoken","setuserToken","gettoken","token","login","username","logout","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,KAArB,QAAkC,kBAAlC;AACA,OAAOC,GAAP,MAAgB,WAAhB;AAEA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,IAAD,CAAhC,CADa,CAEb;;AACA,QAAMc,aAAa,GAAGF,IAAI,IAAI,IAA9B,CAHa,CAGuB;;AAEpC,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,IAAD,CAA1C,CALa,CAKqC;;AAClD,QAAMiB,QAAQ,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAeF,YAAY,CAAC;AAAEE,IAAAA;AAAF,GAAD,CAA5C;;AAEA,QAAMC,KAAK,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAkBP,OAAO,CAAC;AAAEO,IAAAA;AAAF,GAAD,CAAvC;;AACA,QAAMC,MAAM,GAAG,MAAMR,OAAO,CAAC,IAAD,CAA5B;;AAEA,sBACE;AAAA,2BACE,QAAC,UAAD;AAAA,iBACGC,aAAa;AAAA;AAAK;AACjB,cAAC,cAAD;AAAgB,QAAA,IAAI,EAAEF,IAAtB;AAA4B,QAAA,MAAM,EAAES;AAApC;AAAA;AAAA;AAAA;AAAA,cADY,CACmC;AADnC;AAAA;AAGZ;AACA,cAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cALJ,eAOE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,KAAK,EAAE,IAAvB;AAA6B,QAAA,SAAS,EAAEd;AAAxC;AAAA;AAAA;AAAA;AAAA,cAPF,oBAQE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,SAAS,EAAEQ,SAAlC;AAA6C,QAAA,SAAS,EAAEP;AAAxD;AAAA;AAAA;AAAA;AAAA,cARF,EAQsE,GARtE,eAUE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,qBAAZ;AAAkC,QAAA,SAAS,EAAEE;AAA7C;AAAA;AAAA;AAAA;AAAA,cAVF,EAU8D,GAV9D,eAYE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,MAAM,EAAGY,KAAD,iBACN,QAAC,MAAD;AACE,UAAA,aAAa,EAAER,aADjB;AAEE,UAAA,KAAK,EAAEK,KAFT;AAGE,UAAA,QAAQ,EAAEF,QAHZ;AAAA,aAIMK;AAJN;AAAA;AAAA;AAAA;AAAA,gBAHJ,CASK;;AATL;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA4BD;;GAvCQX,G;;KAAAA,G;AAyCT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport css from \"./App.css\";\n\nimport NavigationUser from \"./Components/NavigationUser\";\nimport Navigation from \"./Components/Navigation\";\nimport Home from \"./routes/Home\";\nimport Myspace from \"./routes/Myspace\";\nimport Signin from \"./routes/Signin\";\nimport Repository from \"./routes/Repository\";\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  // login({username})의 함수를 통해 Signin.js에서 username을 가져와 setUser을 통해 상태관리\n  const authenticated = user != null; // 사용자 로그인 인증\n\n  const [usertoken, setuserToken] = useState(null); //위와 같은 login으로 token값을 가져옴\n  const gettoken = ({ token }) => setuserToken({ token });\n\n  const login = ({ username }) => setUser({ username });\n  const logout = () => setUser(null);\n\n  return (\n    <>\n      <HashRouter>\n        {authenticated ? ( //사용자가 로그인 O\n          <NavigationUser user={user} logout={logout} /> //사용자의 카카오 닉네임을 받아온 user(state)와 logout함수를 인자로 보내준다.\n        ) : (\n          // 사용자가 로그인 X\n          <Navigation />\n        )}\n        <Route path=\"/\" exact={true} component={Home} /> {/* HOME 화면 */}\n        <Route path=\"/myspace\" usertoken={usertoken} component={Myspace} />{\" \"}\n        {/* MY SPACE(명함만들기) 화면 */}\n        <Route path=\"/myspace/repository\" component={Repository} />{\" \"}\n        {/* REPOSITORY(명함보관함) 화면 */}\n        <Route\n          path=\"/signin\"\n          render={(props) => (\n            <Signin\n              authenticated={authenticated}\n              login={login}\n              gettoken={gettoken}\n              {...props}\n            />\n          )} // Signin(로그인)을 렌더링할때 authenticated(사용자 로그인 여부)와 login(카카오 로그인 api에서 사용자 닉네임을 받아오기 위한 함수)를 인자로 보내준다.\n        />\n      </HashRouter>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nvar mkdirp = require('mkdirp'),\n    fs = require('fs'),\n    changeName = require('./changename'),\n    path = require('path'),\n    safename = require('safename');\n/*!\n * Rename file and launch callback\n * @param  {String}   oldPath  path to file to move\n * @param  {String}   newPath  path of destination\n * @param  {Function} callback signature: null, {filename, filepath}\n */\n\n\nvar move = function (oldPath, newPath, callback) {\n  fs.rename(oldPath, newPath, function (err) {\n    if (err) {\n      callback(err);\n    } else {\n      callback(null, {\n        filename: newPath.split('/').pop(),\n        filepath: newPath\n      });\n    }\n  });\n};\n/*!\n * return safename file path\n * @param  {String} route target to analyze\n * @return {String}       route analyze\n */\n\n\nvar checkSafeName = function (route) {\n  if (this.safenames) {\n    route = route.split('/');\n    var name = route.pop();\n    name = safename(name);\n    route.push(name);\n    return route.join('/');\n  } else {\n    return route;\n  }\n};\n/*!\n * check if params are right\n */\n\n\nvar checker = function (folder, oldPath, newPath, callback) {\n  var cb = callback || function () {};\n\n  if (typeof newPath === 'function') {\n    cb = newPath;\n    newPath = oldPath.split('/').pop();\n  } else if (!newPath) {\n    newPath = oldPath.split('/').pop();\n  } // check for valid arguments\n\n\n  if (folder && oldPath && typeof folder === 'string' && typeof oldPath === 'string' && fs.existsSync(oldPath)) {\n    // check for existing folder\n    if (this.folders[folder]) {\n      // set target\n      newPath = path.resolve(this.folders[folder], newPath);\n      newPath = checkSafeName.call(this, newPath);\n      return {\n        newPath: newPath,\n        callback: cb\n      };\n    } else {\n      cb('invalid folder');\n      return false;\n    }\n  } else {\n    cb('folder or origin not valid');\n    return false;\n  }\n};\n/**\n * Filesaver constructor.\n *\n * Options:\n *\n * - folders: *Object*\t\twith folder routes\n * - safename: *Boolean*\tuse safe name for files\n *\n * Example:\n *\n * ```js\n * var folders = {\n *     images: './images',\n *     books: './books'\n * }\n * var filesaver = new Filesaver({\n *     folders: folders,\n *     safenames: true\n * });\n * ```\n *\n * @param {Object} options folders and safenames\n */\n\n\nvar Filesaver = function (options) {\n  var x;\n  options = options || {}; // Store folders\n\n  this.folders = options.folders || {};\n  this.safenames = options.safenames || false; // check for existing folders\n\n  for (x in this.folders) {\n    if (!fs.existsSync(this.folders[x])) {\n      // create folder if not exists\n      mkdirp(this.folders[x]);\n    }\n  }\n};\n/**\n * Add a new folder\n *\n * Example:\n *\n * ```js\n * filesaver.folder( 'documents', './path/to/folder', function () {\n *     // do something\n * });\n * ```\n * @param  {String}   name       name of new folder collection\n * @param  {Object}   path       path to its folder\n * @param  {Function} callback   no signature callback\n */\n\n\nFilesaver.prototype.folder = function (name, folderPath, callback) {\n  var _this = this;\n\n  fs.exists(folderPath, function (exists) {\n    if (!exists) {\n      // create folder if not exists\n      mkdirp(folderPath);\n    } // add folder\n\n\n    _this.folders[name] = folderPath; // optional callback\n\n    if (callback) {\n      callback();\n    }\n  });\n};\n/**\n * Write or overwrite file\n *\n * Example:\n *\n * ```js\n * filesaver.put( 'images', '/path/temp/file.jpg', 'photo.jpg', function (err, data) {\n *     console.log( data );\n *     // ->\n *     // filename: 'photo.jpg',\n *     // filepath: './images/photo.jpg'\n *     });\n * ```\n *\n * @param  {String}   folder     name of parent folder folder\n * @param  {String}   oldPath     path to origin file\n * @param  {String}   newPath     name of newPath file\n * @param  {Function} callback   Signature: error, data. Data signature:{filename, filepath}\n */\n\n\nFilesaver.prototype.put = function (folder, oldPath, newPath, callback) {\n  var data = checker.call(this, folder, oldPath, newPath, callback);\n\n  if (data) {\n    move(oldPath, data.newPath, data.callback);\n  }\n};\n/**\n * Write a file without overwriting anyone.\n *\n * Example:\n *\n * ```js\n * filesaver.add( 'images', '/path/temp/file.jpg', 'photo_1.jpg', function (err, data) {\n *     console.log( data );\n *     // ->\n *     // filename: 'photo_2.jpg',\n *     // filepath: './images/photo_2.jpg'\n *     });\n * ```\n *\n * @param  {String}   folder     name of parent folder folder\n * @param  {String}   oldPath     path to origin file\n * @param  {String}   newPath     Optional: name of newPath file\n * @param  {Function} callback   Optional: Signature: error, data. Data signature:{filename, filepath}\n */\n\n\nFilesaver.prototype.add = function (folder, oldPath, newPath, callback) {\n  var data = checker.call(this, folder, oldPath, newPath, callback);\n\n  if (data) {\n    newPath = changeName(data.newPath);\n    move(oldPath, newPath, data.callback);\n  }\n};\n\nmodule.exports = Filesaver;","map":{"version":3,"sources":["C:/Users/qnddj/Desktop/React Project/전자명함Project/makecard/node_modules/filesaver/src/Filesaver.js"],"names":["mkdirp","require","fs","changeName","path","safename","move","oldPath","newPath","callback","rename","err","filename","split","pop","filepath","checkSafeName","route","safenames","name","push","join","checker","folder","cb","existsSync","folders","resolve","call","Filesaver","options","x","prototype","folderPath","_this","exists","put","data","add","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar mkdirp = require('mkdirp'),\n\tfs = require('fs'),\n\tchangeName = require('./changename'),\n\tpath = require('path'),\n\tsafename = require('safename');\n\n\n\n/*!\n * Rename file and launch callback\n * @param  {String}   oldPath  path to file to move\n * @param  {String}   newPath  path of destination\n * @param  {Function} callback signature: null, {filename, filepath}\n */\nvar move = function (oldPath, newPath, callback) {\n\tfs.rename( oldPath, newPath, function (err) {\n\t\tif (err) {\n\t\t\tcallback( err );\n\t\t} else {\n\t\t\tcallback( null, {\n\t\t\t\tfilename: newPath.split( '/' ).pop(),\n\t\t\t\tfilepath: newPath\n\t\t\t});\n\t\t}\n\t});\n};\n\n/*!\n * return safename file path\n * @param  {String} route target to analyze\n * @return {String}       route analyze\n */\nvar checkSafeName = function (route) {\n\tif ( this.safenames ) {\n\t\troute = route.split( '/' );\n\t\tvar name = route.pop();\n\t\tname = safename( name );\n\t\troute.push( name );\n\t\treturn route.join( '/' );\n\t} else {\n\t\treturn route;\n\t}\n};\n\n\n/*!\n * check if params are right\n */\nvar checker = function (folder, oldPath, newPath, callback) {\n\tvar cb = callback || function () {};\n\tif (typeof newPath === 'function') {\n\t\tcb = newPath;\n\t\tnewPath = oldPath.split( '/' ).pop();\n\t} else if (!newPath) {\n\t\tnewPath = oldPath.split( '/' ).pop();\n\t}\n\t// check for valid arguments\n\tif (folder && oldPath && (typeof folder === 'string') && (typeof oldPath === 'string') && fs.existsSync( oldPath )) {\n\t\t// check for existing folder\n\t\tif (this.folders[folder]) {\n\t\t\t// set target\n\t\t\tnewPath = path.resolve( this.folders[folder], newPath );\n\t\t\tnewPath = checkSafeName.call( this, newPath );\n\t\t\treturn {newPath: newPath, callback: cb};\n\t\t} else {\n\t\t\tcb( 'invalid folder' );\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\tcb( 'folder or origin not valid' );\n\t\treturn false;\n\t}\n};\n\n\n/**\n * Filesaver constructor.\n *\n * Options:\n *\n * - folders: *Object*\t\twith folder routes\n * - safename: *Boolean*\tuse safe name for files\n *\n * Example:\n *\n * ```js\n * var folders = {\n *     images: './images',\n *     books: './books'\n * }\n * var filesaver = new Filesaver({\n *     folders: folders,\n *     safenames: true\n * });\n * ```\n *\n * @param {Object} options folders and safenames\n */\n\nvar Filesaver = function (options) {\n\tvar x;\n\toptions = options || {};\n\t// Store folders\n\tthis.folders = options.folders || {};\n\tthis.safenames = options.safenames || false;\n\n\t// check for existing folders\n\tfor (x in this.folders) {\n\t\tif (!fs.existsSync( this.folders[x] )){\n\t\t\t// create folder if not exists\n\t\t\tmkdirp( this.folders[x] );\n\t\t}\n\t}\n};\n\n\n/**\n * Add a new folder\n *\n * Example:\n *\n * ```js\n * filesaver.folder( 'documents', './path/to/folder', function () {\n *     // do something\n * });\n * ```\n * @param  {String}   name       name of new folder collection\n * @param  {Object}   path       path to its folder\n * @param  {Function} callback   no signature callback\n */\n\nFilesaver.prototype.folder = function (name, folderPath, callback) {\n\tvar _this = this;\n\n\tfs.exists( folderPath, function (exists) {\n\t\tif (!exists) {\n\t\t\t// create folder if not exists\n\t\t\tmkdirp( folderPath );\n\t\t}\n\t\t// add folder\n\t\t_this.folders[name] = folderPath;\n\t\t// optional callback\n\t\tif (callback){\n\t\t\tcallback();\n\t\t}\n\t});\n};\n\n\n/**\n * Write or overwrite file\n *\n * Example:\n *\n * ```js\n * filesaver.put( 'images', '/path/temp/file.jpg', 'photo.jpg', function (err, data) {\n *     console.log( data );\n *     // ->\n *     // filename: 'photo.jpg',\n *     // filepath: './images/photo.jpg'\n *     });\n * ```\n *\n * @param  {String}   folder     name of parent folder folder\n * @param  {String}   oldPath     path to origin file\n * @param  {String}   newPath     name of newPath file\n * @param  {Function} callback   Signature: error, data. Data signature:{filename, filepath}\n */\n\nFilesaver.prototype.put = function (folder, oldPath, newPath, callback) {\n\tvar data = checker.call( this, folder, oldPath, newPath, callback );\n\n\tif (data) {\n\t\tmove( oldPath, data.newPath, data.callback );\n\t}\n};\n\n\n\n/**\n * Write a file without overwriting anyone.\n *\n * Example:\n *\n * ```js\n * filesaver.add( 'images', '/path/temp/file.jpg', 'photo_1.jpg', function (err, data) {\n *     console.log( data );\n *     // ->\n *     // filename: 'photo_2.jpg',\n *     // filepath: './images/photo_2.jpg'\n *     });\n * ```\n *\n * @param  {String}   folder     name of parent folder folder\n * @param  {String}   oldPath     path to origin file\n * @param  {String}   newPath     Optional: name of newPath file\n * @param  {Function} callback   Optional: Signature: error, data. Data signature:{filename, filepath}\n */\n\nFilesaver.prototype.add = function (folder, oldPath, newPath, callback) {\n\n\tvar data = checker.call( this, folder, oldPath, newPath, callback );\n\n\tif (data) {\n\t\tnewPath = changeName( data.newPath );\n\t\tmove( oldPath, newPath, data.callback );\n\t}\n};\n\n\nmodule.exports = Filesaver;\n"]},"metadata":{},"sourceType":"script"}